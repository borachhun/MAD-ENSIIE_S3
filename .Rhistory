X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
`NORM-10` <- NORM(n=10, dim=5, pts=1000)
`NORM-25` <- NORM(n=25, dim=15, pts=400)
phi <- function(X, centers) {
res <- 0
for (x_row in 1:nrow(X)) {
to_min <- c()
for (c_row in 1:nrow(centers)) {
to_min <- c(to_min, sum((X[x_row,] - centers[c_row,])^2))
}
res <- res + min(to_min)
}
return(res)
}
perf <- function(dataset) {
T_km <- c()
T_kmpp <- c()
phi_km <- c()
phi_kmpp <- c()
for (k in c(10,25,50)) {
for (i in 1:20) {
Sys.time() -> begin_km
km <- kmeans(dataset, k)
Sys.time() -> end_km
Sys.time() -> begin_kmpp
kmpp <- kmeanspp(dataset, k)
Sys.time() -> end_kmpp
T_km <- c(T_km, end_km-begin_km)
T_kmpp <- c(T_kmpp, end_kmpp-begin_kmpp)
phi_km <- c(phi_km, phi(dataset, km$centers))
phi_kmpp <- c(phi_kmpp, phi(dataset, kmpp$centers))
}
}
return(list(
T_km_10 = T_km[1:20],
T_km_25 = T_km[21:40],
T_km_50 = T_km[41:60],
T_kmpp_10 = T_kmpp[1:20],
T_kmpp_25 = T_kmpp[21:40],
T_kmpp_50 = T_kmpp[41:60],
phi_km_10 = phi_km[1:20],
phi_km_25 = phi_km[21:40],
phi_km_50 = phi_km[41:60],
phi_kmpp_10 = phi_kmpp[1:20],
phi_kmpp_25 = phi_kmpp[21:40],
phi_kmpp_50 = phi_kmpp[41:60]
))
}
perf_NORM_10 <- perf(`NORM-10`)
perf_NORM_25 <- perf(`NORM-25`)
data_iris <- iris[,1:4]
real_class <- iris[,5]
round(1.22222, 3)
round(1.22255, 3)
?round
7e1
7e7
7e10
round(7e10, 3)
round(7.23325345435e10, 3)
install.packages("factoextra")
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
data_iris <- iris[,1:4]
real_class <- iris[,5]
library("factoextra")
iris_scale <- scale(data_iris)
iris.pca <- PCA(iris_scale, ncp = 4, graph = FALSE)
library(FactoMineR)
library("factoextra")
iris_scale <- scale(data_iris)
iris.pca <- PCA(iris_scale, ncp = 4, graph = FALSE)
iris.plot <- fviz_pca_ind(iris.pca, label="none", habillage = iris$Species, title="Original classes")
iris.plot.kmeanspp <- fviz_pca_ind(iris.pca, label="none", habillage = kmpp.cluster, title = "Kmeans++")
iris.plot
iris.plot.kmeanspp
?kmeans
?Mclust
library(mclust)
m <- Mclust(data_iris, G=3)
?Mclust
?table
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
data_iris <- iris[,1:4]
iris_class <- iris[,5]
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, iris_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(`k-means++`=kmpp_class, iris=iris_class)
?Mclust
library(mclust)
m <- Mclust(data_iris)
summary(m)
m_class <- m$classification
table(m_class, real_class)
library(mclust)
m <- Mclust(data_iris, G=3)
summary(m)
m_class <- m$classification
table(m_class, real_class)
library(mclust)
m <- Mclust(data_iris, G=3)
summary(m)
m_class <- m$classification
table(Mclust=m_class, iris=iris_class)
?PCA
library(factoextra)
?PCA
library(FactoMineR)
?PCA
?scale
?PCA
?fviz_pca_ind
data_iris <- iris[,1:4]
iris_class <- iris[,5]
iris.kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- iris.kmpp$cluster
table(`k-means++`=kmpp_class, iris=iris_class)
iris.km <- kmeans(data_iris, 3)
km_class <- iris.km$cluster
table(`k-means++`=km_class, iris=iris_class)
library(mclust)
iris.mclust <- Mclust(data_iris, G=3)
summary(iris.mclust)
m_class <- iris.mclust$classification
table(Mclust=m_class, iris=iris_class)
library(FactoMineR)
iris_scale <- scale(data_iris, center=TRUE, scale=FALSE)
iris.pca <- PCA(iris_scale, scale.unit=FALSE, ncp=4, graph=FALSE)
library(factoextra)
iris.plot <- fviz_pca_ind(iris.pca, label="none", habillage = iris_class, title="Original classes")
iris.plot.kmeanspp <- fviz_pca_ind(iris.pca, label="none", habillage = kmpp_class, title = "k-means++")
iris.plot.kmeans <- fviz_pca_ind(iris.pca, label="none", habillage = km_class, title = "k-means")
iris.plot.mclust <- fviz_pca_ind(iris.pca, label="none", habillage = m_class, title = "Mclust")
iris.plot
iris.plot.kmeanspp
iris.plot.kmeans
iris.plot.mclust
fviz_pca_ind(iris.pca)
fviz_pca_ind(iris.pca, habillage = iris_class)
fviz_pca_ind(iris.pca, habillage = km_class)
kmpp_class
warnings(kmpp_class)
iris.km <- kmeans(data_iris, 3)
km_class <- iris.km$cluster
table(`k-means++`=km_class, iris=iris_class)
km_class
iris.kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- iris.kmpp$cluster
table(`k-means++`=kmpp_class, iris=iris_class)
kmpp_classs
kmpp_class
data_iris <- iris[,1:4]
iris_class <- iris[,5]
iris.kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- iris.kmpp$cluster
table(`k-means++`=kmpp_class, iris=iris_class)
iris.km <- kmeans(data_iris, 3)
km_class <- iris.km$cluster
table(`k-means++`=km_class, iris=iris_class)
library(mclust)
iris.mclust <- Mclust(data_iris, G=3)
summary(iris.mclust)
m_class <- iris.mclust$classification
table(Mclust=m_class, iris=iris_class)
library(FactoMineR)
iris_scale <- scale(data_iris, center=TRUE, scale=FALSE)
iris.pca <- PCA(iris_scale, scale.unit=FALSE, ncp=4, graph=FALSE)
library(factoextra)
iris.plot <- fviz_pca_ind(iris.pca, label="none", habillage = iris_class, title="Original classes")
iris.plot.kmeanspp <- fviz_pca_ind(iris.pca, label="none", habillage = kmpp_class, title = "k-means++")
kmpp_class
fviz_pca_ind(iris.pca, label="none", habillage = kmpp_class, title = "k-means++")
fviz_pca_ind(iris.pca,)
fviz_pca_ind(iris.pca)
fviz_pca_ind(iris.pca, habillage = kmpp_class)
kmpp_class
?fviz_pca_ind
fviz_pca_ind(iris.pca, habillage = as.factor(kmpp_class))
?as.factor
library(factoextra)
iris.plot <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(iris_class), title="Original classes")
iris.plot.kmeanspp <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(kmpp_class), title = "k-means++")
iris.plot.kmeans <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(km_class), title = "k-means")
iris.plot.mclust <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(m_class), title = "Mclust")
iris.plot
iris.plot.kmeanspp
iris.plot.kmeans
iris.plot.mclust
?rmultinom
rmultinom(1, 1000, c(1/3,2/3))
?rbinom
poisson3_15 <- c(poisson3, poisson15)
poisson3 <- rpois(n=100, lambda=3)
hist(poisson3)
poisson15 <- rpois(n=200, lambda=15)
hist(poisson15)
poisson3_15 <- c(poisson3, poisson15)
hist(poisson3_15, col="orange")
?hist
poisson3_15 <- c(poisson3, poisson15)
hist(poisson3_15, col="orange", xlim=c(0,30))
poisson3 <- rpois(n=100, lambda=3)
hist(poisson3, xlim=c(0,30))
poisson15 <- rpois(n=200, lambda=15)
hist(poisson15, xlim=c(0,30))
poisson3 <- rpois(n=100, lambda=3)
hist(poisson3, xlim=c(0,30), ylim=c(0,100))
poisson3_15 <- c(poisson3, poisson15)
hist(poisson3_15, col="darkorange", xlim=c(0,30))
poisson3_15 <- c(poisson3, poisson15)
hist(poisson3_15, col="orange")
?hist
poisson3_15 <- c(poisson3, poisson15)
hist(poisson3_15, col="orange", main="Histogram of Poisson mixture")
poisson3 <- rpois(n=100, lambda=3)
poisson15 <- rpois(n=200, lambda=15)
poisson3_15 <- c(poisson3, poisson15)
hist(poisson3_15, col="orange", main="Histogram of Poisson mixture")
EM_init_poisson <- function(K) {
pi <- rep(1/K, times=K)
lambda <- 1:K
return(c(pi, lambda))
}
# theta : c(pi_k, lambda_k)
E_step_poisson <- function(X, K, theta) {
pi <- theta[1:K]
lambda <- theta[(K+1):(2*K)]
t <- matrix(0, nrow=length(X), ncol=K)
for (i in 1:length(X)) {
for (k in 1:K) {
t[i,k] <- (pi[k] * dpois(X[i],lambda[k])) / sum(pi * dpois(X[i],lambda))
}
}
return(t)
}
# t : result of E step
M_step_poisson <- function(X, K, t) {
lambda <- sapply(1:K, function(k) sum(t[,k]*X) / sum(t[,k]))
pi <- sapply(1:K, function(k) sum(t[,k]) / length(X))
return(c(pi, lambda))
}
X <- poisson3_15
K <- 2
# initialization
theta <- EM_init_poisson(X, K)
X <- poisson3_15
K <- 2
# initialization
theta <- EM_init_poisson(K)
repeat {
# E step
t <- E_step_poisson(X, K, theta)
# M step
new_theta <- M_step_poisson(X, K, t)
# stopping condition
if (sum((theta - new_theta)^2) / sum(theta^2) < 1e-6) {
break
}
theta <- new_theta
}
print(new_theta)
?iris
?iris
table(c(1,1,1,1,2,2,2,3,3,3,3,3), c(1,1,1,1,2,2,3,3,3,3,2,2))
table(c(1,1,1,1,2,2,2,3,3,3,3,3), c(10,10,10,10,20,20,30,30,30,30,20,20))
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
data_iris <- iris[,1:4]
iris_class <- iris[,5]
iris.kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- iris.kmpp$cluster
iris.km <- kmeans(data_iris, 3)
km_class <- iris.km$cluster
library(mclust)
iris.mclust <- Mclust(data_iris, G=3)
summary(iris.mclust)
m_class <- iris.mclust$classification
table(`k-means++`=kmpp_class, iris=iris_class)
table(`k-means`=km_class, iris=iris_class)
table(Mclust=m_class, iris=iris_class)
library(FactoMineR)
iris_scale <- scale(data_iris, center=TRUE, scale=FALSE)
iris.pca <- PCA(iris_scale, scale.unit=FALSE, ncp=4, graph=FALSE)
library(factoextra)
iris.plot <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(iris_class), title="Original classes")
iris.plot.kmeanspp <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(kmpp_class), title = "k-means++")
iris.plot.kmeans <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(km_class), title = "k-means")
iris.plot.mclust <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(m_class), title = "Mclust")
par(mfrow=c(2, 2))
iris.plot
iris.plot.kmeanspp
iris.plot.kmeans
iris.plot.mclust
?ggarrange
ggarrange(
iris.plot,
iris.plot.kmeanspp,
iris.plot.kmeans,
iris.plot.mclust,
ncol=2
)
library(gridExtra)
?grid.arrange
library(gridExtra)
grid.arrange(
iris.plot,
iris.plot.kmeanspp,
iris.plot.kmeans,
iris.plot.mclust,
ncol=2
)
as.factor(iris_class)
fviz_pca_ind(iris.pca, label="none", habillage = "orange", title="Original classes")
fviz_pca_ind(iris.pca, label="none", habillage = rep("orange",150), title="Original classes")
fviz_pca_ind(iris.pca, label="none", habillage = as.factor(rep("orange",150)), title="Original classes")
plot(iris[,1:2])
plot(iris[,1:3])
plot(iris[,c(1,3)])
plot(iris[,c(1,4)])
plot(iris[,c(2,4)])
plot(iris[,c(2,3)])
plot(iris[,c(1,3)])
plot(iris[iris$Petal.Length<2,c(1,3)])
plot(iris[iris$Petal.Length<2,c(1,3)])
plot(iris[,c(1,3)])
plot(iris[iris$Petal.Length>2,c(1,3)])
PCA(iris[iris$Petal.Length>2,c(1,3)])
plot(PCA(iris[iris$Petal.Length>2,c(1,3)]),choix="ind")
PCA(iris[iris$Petal.Length>2,c(1,3)])
plot(iris[iris$Petal.Length>2,c(1,3)])
plot(PCA(iris[iris$Petal.Length>2,c(1,3)]),choix="ind")
?fviz_pca_ind
fviz_pca_ind(PCA(iris[iris$Petal.Length>2,c(1,3)]), axes=c(3,4))
plot(PCA(iris[iris$Petal.Length>2,c(1,3)]),choix="ind")
plot(sample(1:10, 5) * 2 + 5)
x<-sample(1:10, 5)
plot(x, x * 2 + 5)
x<-sample(1:20, 10)
plot(x, x * 2 + 5)
x<-sample(1:50, 10)
plot(x, x * 2 + 5)
PCA(data.frame(x,x*2+5))
plot(x, x * 2 + 5)
plot(PCA(data.frame(x,x*2+5)),choix="ind")
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
data_iris <- iris[,1:4]
iris_class <- iris[,5]
iris.kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- iris.kmpp$cluster
iris.km <- kmeans(data_iris, 3)
km_class <- iris.km$cluster
library(mclust)
iris.mclust <- Mclust(data_iris, G=3)
summary(iris.mclust)
m_class <- iris.mclust$classification
table(`k-means++`=kmpp_class, iris=iris_class)
table(`k-means`=km_class, iris=iris_class)
table(Mclust=m_class, iris=iris_class)
library(FactoMineR)
iris_scale <- scale(data_iris, center=TRUE, scale=FALSE)
iris.pca <- PCA(iris_scale, scale.unit=FALSE, ncp=4, graph=FALSE)
library(factoextra)
iris.plot <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(iris_class), title="Original classes")
iris.plot.kmeanspp <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(kmpp_class), title = "k-means++")
iris.plot.kmeans <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(km_class), title = "k-means")
iris.plot.mclust <- fviz_pca_ind(iris.pca, label="none", habillage = as.factor(m_class), title = "Mclust")
library(gridExtra)
grid.arrange(
iris.plot,
iris.plot.kmeanspp,
iris.plot.kmeans,
iris.plot.mclust,
ncol=2
)
library(gridExtra)
grid.arrange(
iris.plot,
iris.plot.mclust,
iris.plot.kmeanspp,
iris.plot.kmeans,
ncol=2
)
library(gridExtra)
grid.arrange(
iris.plot,
iris.plot.mclust,
iris.plot.kmeans,
iris.plot.kmeanspp,
ncol=2
)
