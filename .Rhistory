data_iris <- iris[,1:4]
k1 <- kmeans(data_iris, centers=2)
m <- Mclust(data_iris)
library(mclust)
m <- Mclust(data_iris)
plot(m)
library(mclust)
m <- Mclust(data_iris)
plot(m, "BIC")
?kmeans
matrix(c(1,2,3,4,5,6), ncol=3)
matrix(c(1,2,3,4,5,6), ncol=3, byrow=TRUE)
NORM <- function(n) {
set.seed(NULL)
dim <- 15
center_coor <- c()
for (_ in 1:(n*dim)) {
NORM <- function(n) {
set.seed(NULL)
dim <- 15
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
res <- c()
for (ct_row in 1:n) {
for (i in 1:400) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
NORM <- function(n) {
set.seed(NULL)
dim <- 15
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
res <- c()
for (ct_row in 1:n) {
for (i in 1:400) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
tmp <- NORM(25)
dim(tmp)
tmp
View(tmp)
kmeans(tmp, centers=25)
?kmeans
rep(1, times=10)
?sample
d_tmp <- c(34,56,23,100,19)
sample(1:4, size=1, prob=(d_tmp^2/sum(d_tmp^2))
)
sample(1:4, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
d_tmp^2/sum(d_tmp^2)
sum(d_tmp^2/sum(d_tmp^2))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
kmeanspp <- function(x, k) {
x <- as.matrix(x)
x_row <- nrow(x)
# choose first center uniformly at random
center_index <- sample(1:x_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:x_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((x[d,]-x[c,])^2))
}
D2 <- c(D2, min(data_centers_distances))
}
# choose a new center
center_index <- c(center_index, sample(1:x_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(x, centers=x[center_index,]))
}
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
NORM-10 <- NORM(n=10, dim=5, pts=10)
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
`NORM-10` <- NORM(n=10, dim=5, pts=10)
`NORM-25` <- NORM(n=25, dim=15, pts=40)
?kable
?kmeans
c(1,2,3,4) - c(1,2)
c(1,2,3,4) - c(1,2,3)
?sum
?norm
?kable
poisson3 <- rpois(n=100, lambda=3)
hist(poisson3)
poisson15 <- rpois(n=200, lambda=15)
hist(poisson15)
hist(c(poisson3, poisson15), col="orange", probability=TRUE, xlim=c(0,30))
#hist(dpois(0:30, lambda=3))
#plot(0:30, dpois(0:30, lambda=3))
#curve(1/3 * dpois(as.integer(x), lambda=3) + 2/3 * dpois(as.integer(x), lambda=15), 0, 5, col="red", add=TRUE)
parameters <- list()
parameters$pi <- c(1/3, 2/3)
parameters$mean <- c(0, 4)
parameters$sd <- c(1, 0.5)
rmultinom(1, 1000, parameters$pi) -> effectifs
x <- c()
for (k in 1:length(parameters$mean)) {
x <- c(x, rnorm(effectifs[k], mean=parameters$mean[k], sd=parameters$sd[k]))
}
hist(x, 50, prob=TRUE)
curve(1/3 * dnorm(x, mean=0, sd=1) + 2/3 * dnorm(x, mean=4, sd=1/2), -3, 5, col="red", add=TRUE)
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
#`NORM-10` <- NORM(n=10, dim=5, pts=1000)
#`NORM-25` <- NORM(n=25, dim=15, pts=400)
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
`NORM-10` <- NORM(n=10, dim=5, pts=1000)
`NORM-25` <- NORM(n=25, dim=15, pts=400)
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_distances))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
Sys.time() -> begin1
kmeans(`NORM-25`, 25)
Sys.time() -> end1
Sys.time() -> begin2
kmeanspp(`NORM-25`, 25)
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
Sys.time() -> begin1
kmeans(`NORM-25`, 25)
Sys.time() -> end1
Sys.time() -> begin2
kmeanspp(`NORM-25`, 25)
Sys.time() -> end2
print(end1-begin1)
print(end2-begin2)
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
`NORM-10` <- NORM(n=10, dim=5, pts=1000)
`NORM-25` <- NORM(n=25, dim=15, pts=400)
kmeans_index <- sample(1:10000, size=25)
kmeanspp_index <- kmeanspp(`NORM-25`, 25)
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
#return(kmeans(X, centers=X[center_index,]))
return(center_index)
}
kmeans_index <- sample(1:10000, size=25)
kmeanspp_index <- kmeanspp(`NORM-25`, 25)
Sys.time() -> begin1
kmeans(`NORM-25`, `NORM-25`[kmeans_index,])
Sys.time() -> end1
Sys.time() -> begin2
kmeanspp(`NORM-25`, `NORM-25`[kmeanspp_index,])
kmeans_index <- sample(1:10000, size=25)
kmeanspp_index <- kmeanspp(`NORM-25`, 25)
Sys.time() -> begin1
kmeans(`NORM-25`, `NORM-25`[kmeans_index,])
Sys.time() -> end1
Sys.time() -> begin2
kmeans(`NORM-25`, `NORM-25`[kmeanspp_index,])
Sys.time() -> end2
print(end1-begin1)
print(end2-begin2)
