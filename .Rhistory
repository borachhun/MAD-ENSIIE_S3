}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
#`NORM-10` <- NORM(n=10, dim=5, pts=1000)
#`NORM-25` <- NORM(n=25, dim=15, pts=400)
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
`NORM-10` <- NORM(n=10, dim=5, pts=1000)
`NORM-25` <- NORM(n=25, dim=15, pts=400)
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_distances))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
Sys.time() -> begin1
kmeans(`NORM-25`, 25)
Sys.time() -> end1
Sys.time() -> begin2
kmeanspp(`NORM-25`, 25)
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
}
Sys.time() -> begin1
kmeans(`NORM-25`, 25)
Sys.time() -> end1
Sys.time() -> begin2
kmeanspp(`NORM-25`, 25)
Sys.time() -> end2
print(end1-begin1)
print(end2-begin2)
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
`NORM-10` <- NORM(n=10, dim=5, pts=1000)
`NORM-25` <- NORM(n=25, dim=15, pts=400)
kmeans_index <- sample(1:10000, size=25)
kmeanspp_index <- kmeanspp(`NORM-25`, 25)
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
#return(kmeans(X, centers=X[center_index,]))
return(center_index)
}
kmeans_index <- sample(1:10000, size=25)
kmeanspp_index <- kmeanspp(`NORM-25`, 25)
Sys.time() -> begin1
kmeans(`NORM-25`, `NORM-25`[kmeans_index,])
Sys.time() -> end1
Sys.time() -> begin2
kmeanspp(`NORM-25`, `NORM-25`[kmeanspp_index,])
kmeans_index <- sample(1:10000, size=25)
kmeanspp_index <- kmeanspp(`NORM-25`, 25)
Sys.time() -> begin1
kmeans(`NORM-25`, `NORM-25`[kmeans_index,])
Sys.time() -> end1
Sys.time() -> begin2
kmeans(`NORM-25`, `NORM-25`[kmeanspp_index,])
Sys.time() -> end2
print(end1-begin1)
print(end2-begin2)
iris
dim(iris)
unique(iris[,5])
length(unique(iris[,5]))
?kmeans
library(mclust)
m <- Mclust(data_iris)
?Mclust
data_iris <- iris[,1:4]
real_class <- iris[,5]
library(mclust)
m <- Mclust(data_iris)
library(mclust)
m <- Mclust(data_iris)
plot(m, "BIC")
data_iris <- iris[,1:4]
real_class <- iris[,5]
kmpp <- kmeanspp(data_iris, 3)
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
#return(kmeans(X, centers=X[center_index,]))
return(center_index)
}
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(X, centers=X[center_index,]))
#return(center_index)
}
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
library(mclust)
m <- Mclust(data_iris)
m_class <- m$classification
table(m_class, real_class)
data_iris <- iris[,1:4]
real_class <- iris[,5]
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
library(mclust)
m <- Mclust(data_iris)
m_class <- m$classification
table(m_class, real_class)
library(mclust)
m <- Mclust(data_iris)
m_class <- m$classification
table(m_class, real_class)
library(mclust)
m <- Mclust(data_iris, G=3)
m_class <- m$classification
table(m_class, real_class)
library(mclust)
m <- Mclust(data_iris, G=3)
m_class <- m$classification
table(m_class, real_class)
library(mclust)
m <- Mclust(data_iris, G=3)
m_class <- m$classification
table(m_class, real_class)
library(mclust)
m <- Mclust(data_iris, G=3)
m_class <- m$classification
table(m_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
km <- kmeans(data_iris, centers=3)
km_class <- km$cluster
table(km_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
kmpp <- kmeanspp(data_iris, 3)
kmpp_class <- kmpp$cluster
table(kmpp_class, real_class)
?pca
library(FactoMineR)
?PCA
PCA(data_iris)
PCA(data_iris[kmpp_class==1,])
PCA(data_iris[kmpp_class==2,])
PCA(data_iris[kmpp_class==3,])
?kmeans
kmeanspp <- function(X, k) {
X <- as.matrix(X)
X_row <- nrow(X)
# choose first center uniformly at random
center_index <- sample(1:X_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:X_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((X[d,]-X[c,])^2))
}
D2 <- c(D2, min(data_centers_dist_sq))
}
# choose a new center
center_index <- c(center_index, sample(1:X_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
#return(kmeans(X, centers=X[center_index,]))
return(center_index)
}
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
`NORM-10` <- NORM(n=10, dim=5, pts=1000)
`NORM-25` <- NORM(n=25, dim=15, pts=400)
kmeans_index <- sample(1:10000, size=25)
kmeanspp_index <- kmeanspp(`NORM-25`, 25)
Sys.time() -> begin1
kmeans(`NORM-25`, `NORM-25`[kmeans_index,])
Sys.time() -> end1
Sys.time() -> begin2
kmeans(`NORM-25`, `NORM-25`[kmeanspp_index,])
Sys.time() -> end2
print(end1-begin1)
print(end2-begin2)
as.formula(10)
as.formula("10")
?as.formula
formula(10)
`22` <- 22
as.formula(22)
as.formula("22")
as.formula(paste("22"))
`i`
?kmeans
T_km <- c()
T_kmpp <- c()
phi_km <- c()
phi_kmpp <- C()
T_km <- c()
T_kmpp <- c()
phi_km <- c()
phi_kmpp <- c()
for (k in c(10,25,50)) {
for (i in 1:20) {
Sys.time() -> begin_km
km <- kmeans(`NORM-25`, k)
Sys.time() -> end_km
Sys.time() -> begin_kmpp
kmpp <- kmeanspp(`NORM-25`, k)
Sys.time() -> end_kmpp
T_km <- c(T_km, end_km-begin_km)
T_kmpp <- c(T_kmpp, end_kmpp-begin_kmpp)
phi_km <- c(phi_km, phi(`NORM-25`, kmeans$centers))
phi_kmpp <- c(phi_km, phi(`NORM-25`, kmeans$centers))
}
}
phi <- function(X, C) {
res <- 0
for (x_row in 1:nrow(X)) {
to_min <- c()
for (c_row in 1:nrow(C)) {
to_min <- c(to_min, sum((X[x_row,] - C[c_row])^2))
}
res <- res + min(to_min)
}
return(res)
}
T_km <- c()
T_kmpp <- c()
phi_km <- c()
phi_kmpp <- c()
for (k in c(10,25,50)) {
for (i in 1:20) {
Sys.time() -> begin_km
km <- kmeans(`NORM-25`, k)
Sys.time() -> end_km
Sys.time() -> begin_kmpp
kmpp <- kmeanspp(`NORM-25`, k)
Sys.time() -> end_kmpp
T_km <- c(T_km, end_km-begin_km)
T_kmpp <- c(T_kmpp, end_kmpp-begin_kmpp)
phi_km <- c(phi_km, phi(`NORM-25`, kmeans$centers))
phi_kmpp <- c(phi_km, phi(`NORM-25`, kmeans$centers))
}
}
phi <- function(X, cluster, center) {
res <- 0
for (x_row in 1:nrow(X)) {
res <- res + sum((X[x_row,] - center[cluster[x_row,]])^2)
}
return(res)
}
phi <- function(X, cluster, center) {
res <- 0
for (x_row in 1:nrow(X)) {
res <- res + sum((X[x_row,] - center[cluster[x_row,],])^2)
}
return(res)
}
T_km <- c()
T_kmpp <- c()
phi_km <- c()
phi_kmpp <- c()
for (k in c(10,25,50)) {
for (i in 1:20) {
Sys.time() -> begin_km
km <- kmeans(`NORM-25`, k)
Sys.time() -> end_km
Sys.time() -> begin_kmpp
kmpp <- kmeanspp(`NORM-25`, k)
Sys.time() -> end_kmpp
T_km <- c(T_km, end_km-begin_km)
T_kmpp <- c(T_kmpp, end_kmpp-begin_kmpp)
phi_km <- c(phi_km, phi(`NORM-25`, km$cluster, km$centers))
phi_kmpp <- c(phi_kmpp, phi(`NORM-25`, kmpp$cluster, kmpp$centers))
}
}
phi <- function(X, cluster, center) {
res <- 0
for (x_row in 1:nrow(X)) {
res <- res + sum((X[x_row,] - center[cluster[x_row],])^2)
}
return(res)
}
T_km <- c()
T_kmpp <- c()
phi_km <- c()
phi_kmpp <- c()
for (k in c(10,25,50)) {
for (i in 1:20) {
Sys.time() -> begin_km
km <- kmeans(`NORM-25`, k)
Sys.time() -> end_km
Sys.time() -> begin_kmpp
kmpp <- kmeanspp(`NORM-25`, k)
Sys.time() -> end_kmpp
T_km <- c(T_km, end_km-begin_km)
T_kmpp <- c(T_kmpp, end_kmpp-begin_kmpp)
phi_km <- c(phi_km, phi(`NORM-25`, km$cluster, km$centers))
phi_kmpp <- c(phi_kmpp, phi(`NORM-25`, kmpp$cluster, kmpp$centers))
}
}
?Mclust
