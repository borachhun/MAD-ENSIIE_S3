data_iris <- iris[,1:4]
k1 <- kmeans(data_iris, centers=2)
m <- Mclust(data_iris)
library(mclust)
m <- Mclust(data_iris)
plot(m)
library(mclust)
m <- Mclust(data_iris)
plot(m, "BIC")
?kmeans
matrix(c(1,2,3,4,5,6), ncol=3)
matrix(c(1,2,3,4,5,6), ncol=3, byrow=TRUE)
NORM <- function(n) {
set.seed(NULL)
dim <- 15
center_coor <- c()
for (_ in 1:(n*dim)) {
NORM <- function(n) {
set.seed(NULL)
dim <- 15
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
res <- c()
for (ct_row in 1:n) {
for (i in 1:400) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
NORM <- function(n) {
set.seed(NULL)
dim <- 15
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
res <- c()
for (ct_row in 1:n) {
for (i in 1:400) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
tmp <- NORM(25)
dim(tmp)
tmp
View(tmp)
kmeans(tmp, centers=25)
?kmeans
rep(1, times=10)
?sample
d_tmp <- c(34,56,23,100,19)
sample(1:4, size=1, prob=(d_tmp^2/sum(d_tmp^2))
)
sample(1:4, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
d_tmp^2/sum(d_tmp^2)
sum(d_tmp^2/sum(d_tmp^2))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
sample(1:5, size=1, prob=(d_tmp^2/sum(d_tmp^2)))
kmeanspp <- function(x, k) {
x <- as.matrix(x)
x_row <- nrow(x)
# choose first center uniformly at random
center_index <- sample(1:x_row, size=1)
for (i in 2:k) {
# calculate squared distance to closest chosen center
D2 <- c()
for (d in 1:x_row) {
data_centers_dist_sq <- c()
for (c in center_index) {
data_centers_dist_sq <- c(data_centers_dist_sq, sum((x[d,]-x[c,])^2))
}
D2 <- c(D2, min(data_centers_distances))
}
# choose a new center
center_index <- c(center_index, sample(1:x_row, size=1, prob=(D2/sum(D2))))
}
# run kmeans with initialized centers
return(kmeans(x, centers=x[center_index,]))
}
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
NORM-10 <- NORM(n=10, dim=5, pts=10)
# n = number of centers
# dim = dimension of data
# pts = number of points around each center
NORM <- function(n, dim, pts) {
set.seed(NULL)
# choose true centers
center_coor <- c()
for (i in 1:(n*dim)) {
center_coor <- c(center_coor, runif(1, min=0, max=500))
}
true_centers <- matrix(center_coor, nrow=n, ncol=dim, byrow=TRUE)
# add points around centers
res <- c()
for (ct_row in 1:n) {
for (i in 1:pts) {
for (ct_col in 1:dim) {
res <- c(res, rnorm(1, mean=true_centers[ct_row, ct_col], sd=1))
}
}
}
return(matrix(res, ncol=dim, byrow=TRUE))
}
`NORM-10` <- NORM(n=10, dim=5, pts=10)
`NORM-25` <- NORM(n=25, dim=15, pts=40)
?kable
?kmeans
c(1,2,3,4) - c(1,2)
c(1,2,3,4) - c(1,2,3)
?sum
?norm
?kable
